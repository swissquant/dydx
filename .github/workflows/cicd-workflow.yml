name: CD/CI Workflow

on: [push]

env:
  HELM_EXPERIMENTAL_OCI: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # - name: Load SSH key into local agent
      #   uses: webfactory/ssh-agent@v0.5.4
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Run lint & format
        run: |
          poetry run flake8 .
          poetry run black --check .

      - name: Verify types
        run: poetry run mypy --ignore-missing-imports src

  build-deploy:
    name: Build & Deploy
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/')
    needs: check

    steps:
      - uses: actions/checkout@v3

      # - name: Load SSH key into local agent
      #   uses: webfactory/ssh-agent@v0.5.4
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.0.1

      - name: Install Helm
        uses: azure/setup-helm@v3.4

      - name: Set up Docker Context for Buildx
        run: docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: Login to GitHub Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io --username ${{ github.repository_owner }} --password-stdin
          helm pull oci://ghcr.io/nemoengineering/generic-application

      - name: Configure GCR & GKE
        run: |
          gcloud auth configure-docker europe-docker.pkg.dev
          gcloud container clusters get-credentials nemo-services-general --region europe-west1 --project nemo-services

      - name: Build Docker image and publish to registry
        run: |
          DOCKER_BUILDKIT=1 docker build -t europe-docker.pkg.dev/nemo-services/images/APPLICATION_NAME:${GITHUB_REF#refs/tags/}-${{ github.run_number }} --ssh default .
          docker push europe-docker.pkg.dev/nemo-services/images/APPLICATION_NAME:${GITHUB_REF#refs/tags/}-${{ github.run_number }}

      - name: Release with Helm
        run: |
          helm upgrade -i \
          -f ./helm/values.yml \
          -n APPLICATION_NAMESPACE --create-namespace \
          --set image.tag=${GITHUB_REF#refs/tags/}-${{ github.run_number }} \
          APPLICATION_NAME oci://ghcr.io/nemoengineering/generic-application
